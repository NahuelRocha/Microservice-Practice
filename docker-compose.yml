version: "3"

services:
  ### MySql database Registry and Authentication
  db-registerauth:
    container_name: db-registerauth
    image: mysql:8.0.33
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ms_registerauth
      MYSQL_USER: nroch
      MYSQL_PASSWORD: Test123
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3307:3306
    expose:
      - 3307

  ### MySql database Product
  db-products:
    container_name: db-products
    image: mysql:8.0.33
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ms_products
      MYSQL_USER: nroch
      MYSQL_PASSWORD: Test123
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3308:3306
    expose:
      - 3308

  ### MySql database Orders
  db-orders:
    container_name: db-orders
    image: mysql:8.0.33
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ms_orders
      MYSQL_USER: nroch
      MYSQL_PASSWORD: Test123
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3309:3306
    expose:
      - 3309

  ### Zipkin
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - zipkin

  ### Redis
  redis:
    image: redis:latest
    container_name: my-redis-container
    ports:
      - "6379:6379"
    networks:
      - my-network
    volumes:
      - redis-data:/data
    command: redis-server

  ### Prometheus
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  ### Grafana
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"

  ### OpenTelemetry
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.86.0
    restart: always
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./docker/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension
    depends_on:
      - zipkin


  ### Zookeeper
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  ### Apache Kafka
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1



networks:
  zipkin:
    driver: bridge
  my-network:
    driver: bridge


volumes:
  redis-data:



